// parse.cpp

//#define DEBUG_syntax

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

class parser {
private:
    char b[1025], *l, *end;
    void error( char *r, ... );

public:
    int parse();
    void fillb();
};

void parser::error( char *r, ... )
{
    va_list arglist;
    va_start( arglist, r );
    vfprintf( stderr, r, arglist );
}


void parser::fillb()
{
    int size = fread( b, 1, 1024, stdin );
    b[size] = 0; end = b + size; l = b;
}


int main( int argc, char *argv[] )
{
    int  i;
    char *input = "-";
    parser p;
    
    for( i = 1; i < argc; i++ ) {
        if( argv[i][0]!='-' || argv[i][1]==0 )
            input = argv[i];
    }
    printf("teste\n");
    if( input[0] != '-' || input[1] != 0 )
        if( !freopen( input, "r", stdin ) ) {
            perror( input );
            return 1;
        }

    p.fillb();
    p.parse();
    return 0;
}
struct lapg_place {
	int line, column;
};

struct lapg_symbol {
	void *sym;
	int  lexem, state;
	struct lapg_place pos;
};

static const char lapg_char2no[256] = {
   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   5,   1,   1,   1,   1,   1,   1,   1,   6,   7,   1,   1,   1,   1,   1,   8,
   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,   1,  19,   1,  20,   1,   1,
   1,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,   1,   1,   1,   1,  47,
   1,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,
  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
};

static const short lapg_lexem[36][74] = {
{  -2,  -1,   1,   1,   1,   1,   2,   3,   4,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,   6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   7,   7,   9,   7,   7,   7,  10,   7,   7,   7,   7,   7,   7,   7,   7,  11,   7,  12,   7,   7,  13,   7,   7,   7, },
{  -3,  -3,   1,   1,   1,   1,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, },
{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  15,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  17,   7,  18,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  19,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  20,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  21,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  22,   7,   7,   7,   7,   7,   7,   7,   7, },
{  -3,  14,  14,  -3,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14, },
{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  23,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  24,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  25,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  26,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  27,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  28,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  29,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  30,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -15, -15, -15, -15, -15, -15, -15, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  31,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -10, -10, -10, -10, -10, -10, -10, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{ -14, -14, -14, -14, -14, -14, -14, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
};

static const int lapg_action[32] = {
  -1,  -1,  -1,  -1,  -1,  -3,  -1,   3,   4,   5,   6,  -1,  -1,  -1,  -1,   1,
  -1,  -1,   7,   2,  10,  -1,  -1, -15,  -1,  -1,  -1,  11,  12,   9,  -1,  -2,
};

static const short lapg_lalr[20] = {
   3,  -1,   4,  -1,   6,  -1,  14,  -1,   0,   0,  -1,  -2,   8,  -1,   2,   8,
  13,   8,  -1,  -2,
};

static const short lapg_sym_goto[22+1] = {
   0,   1,   1,   3,   6,   9,  10,  13,  14,  15,  16,  18,  19,  21,  22,  30,
  31,  32,  35,  38,  41,  42,  44,
};

static const short lapg_sym_from[44] = {
  30,   6,  14,   0,   5,  22,   0,   5,  22,   4,   0,   5,  22,  12,  23,   3,
  16,  24,  16,  17,  26,  25,   0,   1,   2,   5,  11,  13,  21,  22,   0,   0,
   0,   5,  22,   0,   5,  22,   0,   5,  22,   3,  17,  26,
};

static const short lapg_sym_to[44] = {
  31,  15,  19,   1,   1,   1,   2,   2,   2,  13,   3,   3,   3,  17,  26,  11,
  20,  27,  21,  22,  22,  28,   4,   9,  10,   4,  16,  18,  24,   4,  30,   5,
   6,  14,  25,   7,   7,   7,   8,   8,   8,  12,  23,  29,
};

static const short lapg_rlen[13] = {
   1,   2,   3,   1,   1,   2,   2,   3,   4,   6,   3,   5,   3,
};

static const short lapg_rlex[13] = {
  15,  16,  16,  17,  17,  18,  18,  18,  19,  19,  20,  20,  21,
};

#ifdef DEBUG_syntax
static const char *lapg_syms[] = {
"eoi",
"_skip",
"'eol'",
"'read'",
"'write'",
"'='",
"'if'",
"'then'",
"'else'",
"'('",
"')'",
"'=='",
"'begin'",
"'end'",
"'id'",
"input",
"prog",
"cmd",
"io",
"if",
"cond",
"block",
};
#endif

static inline int lapg_next( int state, int symbol )
{
	if( lapg_action[state] < -2 ) {
		const short *p = lapg_lalr - lapg_action[state] - 3;
		for( ;*p >= 0; p += 2 )
			if( *p == symbol ) break;
		return p[1];
	}
	return lapg_action[state];
}

static inline int lapg_state_sym( int state, int symbol )
{
	int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
	int i, e;

	while( min <= max ) {
		e = (min + max) >> 1;
		i = lapg_sym_from[e];
		if( i == state )
			return lapg_sym_to[e];
		else if( i < state )
			min = e + 1;
		else
			max = e - 1;
	}
	return -1;
}

int parser::parse()
{
	char *token = new char[1024];
	int  lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
	lapg_symbol *lapg_m = new lapg_symbol[1024];
	lapg_symbol lapg_n = { NULL, -1, 0 };
	lapg_place lapg_current = { 1, 1 };

	lapg_m[0].state = 0;
	chr = *l++;if( l == end ) fillb();

	do {
		lapg_n.pos = lapg_current;
		for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
			if( lapg_size < 1024-1 ) token[lapg_size++] = chr;
			lapg_i = lapg_lexem[lapg_i][lapg_char2no[chr]];
			if( lapg_i >= -1 && chr ) { 
				lapg_current.column++;
				if( chr == '\n' ) lapg_current.column = 1, lapg_current.line++;
				chr = *l++;if( l == end ) fillb();
			}
		}
		token[lapg_size] = 0;

		if( lapg_i == -1 ) {
			error( "invalid lexem at line %i, column %i: `%s`, skipped\n", lapg_n.pos.line, lapg_n.pos.column, token );
			continue;
		}

		token[lapg_size-1] = 0;
		lapg_n.lexem = -lapg_i-2;
		lapg_n.sym = NULL;
		switch( lapg_n.lexem ) {
			case 1: {
				#line 9 "syntaxC"
				 continue; 
			} break;
		}

		do {
			lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

			if( lapg_i >= 0 ) {
				lapg_symbol lapg_gg={(lapg_rlen[lapg_i])?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:NULL,lapg_rlex[lapg_i],0 };
				#ifdef DEBUG_syntax
					fprintf( stdout, "reduce to %s\n", lapg_syms[lapg_rlex[lapg_i]] );
				#endif
				lapg_gg.pos = (lapg_rlen[lapg_i])?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
				switch( lapg_i ) {
					case 0: {
						#line 31 "syntaxC"
						 printf("[good]"); 
					} break;
				}
				lapg_head -= lapg_rlen[lapg_i];
				lapg_m[++lapg_head] = lapg_gg;
				lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
			} else if( lapg_i == -1 ) {
				lapg_m[++lapg_head] = lapg_n;
				lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
				#ifdef DEBUG_syntax
					fprintf( stdout, "shift: %s (%s)\n", lapg_syms[lapg_n.lexem], token );
				#endif
			}

		} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

		if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
			break;
		}

	} while( lapg_n.lexem );

	if( lapg_m[lapg_head].state == 32-1 ) lapg_i = 1; else lapg_i = 0;
	delete[] lapg_m;
	delete[] token;

	if( !lapg_i ) error( "syntax error before line %i, column %i\n", lapg_n.pos.line, lapg_n.pos.column );
	return lapg_i;
}
