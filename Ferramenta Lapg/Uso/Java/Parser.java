// Parser.java

package mypackage;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;

public class Parser {
	
	private static final boolean DEBUG_SYNTAX = true;
	byte[] buff = new byte[1025];
	int l, end;
	InputStream input;
	
	void fillb() {
		l = 0;
		try {
			end = input.read( buff, 0, 1024 );
			if( end == -1 )
				end = 0;
		} catch( IOException ex ) {
			end = 0;
		}
		buff[end] = 0;
	}
	
	void error( String s ) {
		System.err.println(s);
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		Parser p = new Parser();
		
		if( args.length > 0 ) 
			p.input = new FileInputStream( args[0] );
		else 
			p.input = System.in;
	
		p.fillb();
		p.parse();
	}

	public class lapg_place {
		public int line, column;

		public lapg_place( int line, int column ) {
			this.line = line;
			this.column = column;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   1,   1,   1,   1,   1,   1,   1,   6,   7,   1,   1,   1,   1,   1,   8,
		   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,   1,  19,   1,  20,   1,   1,
		   1,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
		  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,   1,   1,   1,   1,  47,
		   1,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,
		  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private static final short[][] lapg_lexem = new short[][] {
		{  -2,  -1,   1,   1,   1,   1,   2,   3,   4,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,   6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   7,   7,   9,   7,   7,   7,  10,   7,   7,   7,   7,   7,   7,   7,   7,  11,   7,  12,   7,   7,  13,   7,   7,   7, },
		{  -3,  -3,   1,   1,   1,   1,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  15,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  17,   7,  18,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  19,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  20,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  21,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  22,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -3,  14,  14,  -3,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  23,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  24,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  25,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  26,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  27,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  28,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  29,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  30,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  31,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,  -1,  -1,  -1,  -1,  -3,  -1,   3,   4,   5,   6,  -1,  -1,  -1,  -1,   1,
		  -1,  -1,   7,   2,  10,  -1,  -1, -15,  -1,  -1,  -1,  11,  12,   9,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   3,  -1,   4,  -1,   6,  -1,  14,  -1,   0,   0,  -1,  -2,   8,  -1,   2,   8,
		  13,   8,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,   1,   3,   6,   9,  10,  13,  14,  15,  16,  18,  19,  21,  22,  30,
		  31,  32,  35,  38,  41,  42,  44,
	};

	private static final short[] lapg_sym_from = new short[] {
		  30,   6,  14,   0,   5,  22,   0,   5,  22,   4,   0,   5,  22,  12,  23,   3,
		  16,  24,  16,  17,  26,  25,   0,   1,   2,   5,  11,  13,  21,  22,   0,   0,
		   0,   5,  22,   0,   5,  22,   0,   5,  22,   3,  17,  26,
	};

	private static final short[] lapg_sym_to = new short[] {
		  31,  15,  19,   1,   1,   1,   2,   2,   2,  13,   3,   3,   3,  17,  26,  11,
		  20,  27,  21,  22,  22,  28,   4,   9,  10,   4,  16,  18,  24,   4,  30,   5,
		   6,  14,  25,   7,   7,   7,   8,   8,   8,  12,  23,  29,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   3,   1,   1,   2,   2,   3,   4,   6,   3,   5,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  15,  16,  16,  17,  17,  18,  18,  18,  19,  19,  20,  20,  21,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"_skip",
		"'eol'",
		"'read'",
		"'write'",
		"'='",
		"'if'",
		"'then'",
		"'else'",
		"'('",
		"')'",
		"'=='",
		"'begin'",
		"'end'",
		"'id'",
		"input",
		"prog",
		"cmd",
		"io",
		"if",
		"cond",
		"block",
	};

	public enum Tokens {
		eoi,
		_skip,
		eol,
		read,
		write,
		EQ,
		if,
		then,
		else,
		LROUNDBRACKET,
		RROUNDBRACKET,
		EQEQ,
		begin,
		end,
		id,
		input,
		prog,
		cmd,
		io,
		if,
		cond,
		block,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_column = 1;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = buff[l++];if( l == end ) fillb();

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_column );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[chr]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_column++;
					if( chr == '\n' ) { lapg_current_column = 1; lapg_current_line++; }
					chr = buff[l++];if( l == end ) fillb();
				}
			}

			if( lapg_i == -1 ) {
				error( MessageFormat.format( "invalid lexem at line {0}, column {1}: `{2}`, skipped", lapg_n.pos.line, lapg_n.pos.column, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 1:
					 continue; 
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					switch( lapg_i ) {
						case 0:
							 System.out.println("[good]"); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 32-1 ) {
			error( MessageFormat.format( "syntax error before line {0}, column {1}", lapg_n.pos.line, lapg_n.pos.column ) );
			return false;
		};
		return true;
	}
}
