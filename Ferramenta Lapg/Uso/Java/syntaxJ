#   Automatically generated grammar

.lang        "java" 
.getsym      "chr = buff[l++];if( l == end ) fillb()"
.positioning "full"
.class       "Parser"
.namespace	 "mypackage"
.breaks		 "on"

# Vocabulary

_skip:        /\/\/.*/
_skip:        /[\t\r\n ]+/                      { continue; }
'eol':        /;/
'read':       /read/
'write':      /write/
'=':          /=/
'if':         /if/
'then':       /then/
'else':       /else/
'(':		  /\(/
')':		  /\)/
'==':         /==/
'begin':      /begin/
'end':        /end/
'id':         /[a-zA-Z_][a-zA-Z_0-9]*/  -1

# Attributes

[]

# Grammar

input ::= 
    prog { System.out.println("[good]"); } ;

prog ::= 
      cmd 'eol'
    | prog cmd 'eol' ;

cmd ::= 
	  io
    | if ;

io ::= 
      'read' 'id'
    | 'write' 'id'
    | 'id' '=' 'id' ;

if ::= 
      'if' cond 'then' block
    | 'if' cond 'then' block 'else' block ;

cond ::= 
      '(' 'id' ')'
    | '(' 'id' '==' 'id' ')' ;

block ::= 
    'begin' cmd 'end' ;

%%
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
%%

private static final boolean DEBUG_SYNTAX = true;
byte[] buff = new byte[1025];
int l, end;
InputStream input;

void fillb() {
	l = 0;
	try {
		end = input.read( buff, 0, 1024 );
		if( end == -1 )
			end = 0;
	} catch( IOException ex ) {
		end = 0;
	}
	buff[end] = 0;
}

void error( String s ) {
	System.err.println(s);
}

public static void main(String[] args) throws FileNotFoundException {
	Parser p = new Parser();
	
	if( args.length > 0 ) 
		p.input = new FileInputStream( args[0] );
	else 
		p.input = System.in;

	p.fillb();
	p.parse();
}
