// parse.js

dump = alert;

function error(s) {
	dump(s);
}

function parse(string) {
	var p = new myparser();
	p.buff = string;
	p.l = 0;
//	p.DEBUG_syntax = 1;
	p.parse();
}

function myparser() {
}

myparser.prototype = {
	

	lapg_char2no: [
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   1,   1,   1,   1,   1,   1,   1,   6,   7,   1,   1,   1,   1,   1,   8,
		   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,   1,  19,   1,  20,   1,   1,
		   1,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
		  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,   1,   1,   1,   1,  47,
		   1,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,
		  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	],

	lapg_lexem: [
		[  -2,  -1,   1,   1,   1,   1,   2,   3,   4,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,   6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   7,   7,   9,   7,   7,   7,  10,   7,   7,   7,   7,   7,   7,   7,   7,  11,   7,  12,   7,   7,  13,   7,   7,   7, ],
		[  -3,  -3,   1,   1,   1,   1,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, ],
		[ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, ],
		[ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, ],
		[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, ],
		[  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, ],
		[  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  15,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  17,   7,  18,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  19,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  20,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  21,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  22,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[  -3,  14,  14,  -3,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14, ],
		[ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  23,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  24,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  25,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -8,  -8,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  26,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  27,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  28,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  29,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  30,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -15, -15, -15, -15, -15, -15, -15, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -15, -15,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  31,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -10, -10, -10, -10, -10, -10, -10, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -10, -10,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -5,  -5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -9,  -9,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -16, -16, -16, -16, -16, -16, -16, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -16, -16,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[ -14, -14, -14, -14, -14, -14, -14, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, -14, -14,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
		[  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -6,  -6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, ],
	],

	lapg_action: [
		  -1,  -1,  -1,  -1,  -1,  -3,  -1,   3,   4,   5,   6,  -1,  -1,  -1,  -1,   1,
		  -1,  -1,   7,   2,  10,  -1,  -1, -15,  -1,  -1,  -1,  11,  12,   9,  -1,  -2,
	],

	lapg_lalr: [
		   3,  -1,   4,  -1,   6,  -1,  14,  -1,   0,   0,  -1,  -2,   8,  -1,   2,   8,
		  13,   8,  -1,  -2,
	],

	lapg_sym_goto: [
		   0,   1,   1,   3,   6,   9,  10,  13,  14,  15,  16,  18,  19,  21,  22,  30,
		  31,  32,  35,  38,  41,  42,  44,
	],

	lapg_sym_from: [
		  30,   6,  14,   0,   5,  22,   0,   5,  22,   4,   0,   5,  22,  12,  23,   3,
		  16,  24,  16,  17,  26,  25,   0,   1,   2,   5,  11,  13,  21,  22,   0,   0,
		   0,   5,  22,   0,   5,  22,   0,   5,  22,   3,  17,  26,
	],

	lapg_sym_to: [
		  31,  15,  19,   1,   1,   1,   2,   2,   2,  13,   3,   3,   3,  17,  26,  11,
		  20,  27,  21,  22,  22,  28,   4,   9,  10,   4,  16,  18,  24,   4,  30,   5,
		   6,  14,  25,   7,   7,   7,   8,   8,   8,  12,  23,  29,
	],

	lapg_rlen: [
		   1,   2,   3,   1,   1,   2,   2,   3,   4,   6,   3,   5,   3,
	],

	lapg_rlex: [
		  15,  16,  16,  17,  17,  18,  18,  18,  19,  19,  20,  20,  21,
	],

	lapg_syms: [
		"eoi",
		"_skip",
		"'eol'",
		"'read'",
		"'write'",
		"'='",
		"'if'",
		"'then'",
		"'else'",
		"'('",
		"')'",
		"'=='",
		"'begin'",
		"'end'",
		"'id'",
		"input",
		"prog",
		"cmd",
		"io",
		"if",
		"cond",
		"block",
	],

	lapg_next: function(state, symbol) {
		var p;
		if (this.lapg_action[state] < -2) {
			for (p = -this.lapg_action[state] - 3; this.lapg_lalr[p] >= 0; p+= 2)
				if (this.lapg_lalr[p] == symbol)
					break;
			return this.lapg_lalr[p+1];
		}
		return this.lapg_action[state];
	},

	lapg_state_sym: function(state, symbol) {
		var min = this.lapg_sym_goto[symbol], max = this.lapg_sym_goto[symbol+1]-1;
		var i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = this.lapg_sym_from[e];
			if (i == state)
				return this.lapg_sym_to[e];
			else if (i < state)
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	},

	setPos: function(dest, src, prop) {
		dest = dest[prop] = {};
		dest.line = src.line;
		dest.column = src.column;
	},

	parse: function() {
		var token;
		var lapg_head = 0, group = 0, lapg_i, chr;
		var lapg_m = new Array(1024);
		var lapg_n = {};
		var lapg_current = {};

		lapg_current.line = lapg_current.column = 1;
		lapg_m[0] = {state: 0}; lapg_n.lexem = lapg_n.state = 0;
		chr = this.buff.charAt(this.l++);

		do {
			this.setPos(lapg_n, lapg_current, "pos");
			for (lapg_i = group, token=""; lapg_i >= 0;) {
				if( chr == "" )
					chr = null;
				if (token.length < 1024-1 && chr != null)
					token += chr;
				lapg_i = this.lapg_lexem[lapg_i][this.lapg_char2no[chr!=null?chr.charCodeAt(0):0]];
				if (lapg_i >= -1 && chr!=null) { 
					lapg_current.column++;
					if (chr == "\n") { lapg_current.column = 1; lapg_current.line++; }
					chr = this.buff.charAt(this.l++);
				}
			}


			if (lapg_i == -1) {
				error( "invalid lexem at line "+lapg_n.pos.line+", column "+lapg_n.pos.column+": `"+token+"`, skipped");
				continue;
			}

			token = token.substr(0, token.length-1);
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch (lapg_n.lexem) {
				case 1: {
					 continue; 
					break;
				}
			}

			do {
				lapg_i = this.lapg_next(lapg_m[lapg_head].state, lapg_n.lexem);

				if (lapg_i >= 0) {
					var lapg_gg = {};
					lapg_gg.sym = this.lapg_rlen[lapg_i]?lapg_m[lapg_head+1-this.lapg_rlen[lapg_i]].sym : null;
					lapg_gg.lexem = this.lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if (this.DEBUG_syntax)
						dump("reduce to "+this.lapg_syms[this.lapg_rlex[lapg_i]]);
					
					this.setPos(lapg_gg, this.lapg_rlen[lapg_i] ? lapg_m[lapg_head+1-this.lapg_rlen[lapg_i]].pos : lapg_n.pos, "pos");
					switch (lapg_i) {
						case 0: {
							 dump("[good]"); 
						} break;
					}
					lapg_head-= this.lapg_rlen[lapg_i];
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = this.lapg_state_sym(lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if (lapg_i == -1) {
					lapg_m[++lapg_head] = {};
					lapg_m[lapg_head].sym = lapg_n.sym;
					lapg_m[lapg_head].lexem = lapg_n.lexem;
					this.setPos(lapg_m[lapg_head], lapg_n.pos, "pos");
					lapg_m[lapg_head].state = this.lapg_state_sym(lapg_m[lapg_head-1].state, lapg_n.lexem);
					if (this.DEBUG_syntax)
						dump( "shift: "+this.lapg_syms[lapg_n.lexem]+" ("+token+")");
				}

			} while (lapg_i >= 0 && lapg_m[lapg_head].state != -1);

			if ((lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0) {
				break;
			}

		} while (lapg_n.lexem);

		if (lapg_m[lapg_head].state != 32-1) {
			error( "syntax error before line "+lapg_n.pos.line+", column "+lapg_n.pos.column);
			return false;
		};
		return true;
	}
}
